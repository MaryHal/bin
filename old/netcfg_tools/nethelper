#!/usr/bin/env python 
# THIS CODE IS SUCH A MESS. FIX IT. FIX IT. FIX IT.

import os
import sys

def isStandalone():
    return sys.stdin.isatty()

def match(line, keyword):
    """If the first part of line (modulo blanks) matches keyword,
    returns the end of that line. Otherwise returns None"""
    line = line.lstrip()
    length = len(keyword)
    if line[:length] == keyword:
        return line[length:]
    else:
        return None

class Cell:
    def __init__(self):
        self.profileExists = False
        self.name = ''
        self.address = ''
        self.channel = ''
        self.quality = ''
        self.encryption = ''

        self.rules = {"ESSID:" : self.setName,
                "Address: " : self.setAddress, 
                "Frequency:" : self.setChannel,
                "Quality:" : self.setQuality,
                "Encryption key:" : self.setEncryption1,
                "IE: " : self.setEncryption2}

    def setName(self, matchLine):
        self.name = matchLine[1:-2]
        self.profileExists = os.path.exists('/etc/network.d/' + self.name)

    def setAddress(self, matchLine):
        self.address = matchLine[:-2]

    def setChannel(self, matchLine):
        self.channel = matchLine[-12:-1].rstrip()

    def setQuality(self, matchLine):
        self.quality = matchLine[:3].rstrip()

    def setEncryption1(self, matchLine):
        if matchLine == 'off':
            self.encryption = 'Open'
        else:
            self.encryption = 'None'
            
    def setEncryption2(self, matchLine):
        # Eh, WPA is all the same (well, at least i'm pretty sure i don't need to make the distiction
        if matchLine.find("WPA") or matchLine.find("WPA2"):
            self.encryption = "WPA"
        
    def parseLine(self, line):
        for key in self.rules:
            matchLine = match(line, key)
            if matchLine != None:
                self.rules[key](matchLine)

def checkPrivileges():
    return os.getuid() == 0 and "root" or "not root"

def printTable(cellList):
    #cellList.sort(None, lambda x: int(x.quality[0]), True)
    # find longest ESSID
    longest = 0
    for cell in cellList:
        if len(cell.name) > longest:
            longest = len(cell.name)

    for cell in cellList:
        print ("%s%s | %s | %s | %s%s | %d" % (cell.name, " " * (longest - len(cell.name)), cell.address, cell.quality, cell.encryption, " " * (4 - len(cell.encryption)), cell.profileExists))

# OH MY GOD this program is way too much of a hack
def main():
    #if checkPrivileges() != "root":
        #print "Script needs root access."
        #sys.exit()

    cellList = []
    currentCell = None

    if not isStandalone():
        for line in sys.stdin:
            if match(line, "Cell "):
                currentCell = Cell()
                line = line.lstrip()[10:] # This line helps us get the MAC address as it's on the same line as the cell number

            if currentCell != None:
                currentCell.parseLine(line)
                if currentCell.encryption != '':
                    cellList.append(currentCell)
                    currentCell = None

    else:
        print ("Scanning for networks...")
        os.system("sudo iwlist eth1 scan > /tmp/networklist")
        file = open("/tmp/networklist", "r")

        print ("Parsing network list")
        for line in file:
            if match(line, "Cell "):
                currentCell = Cell()
                line = line.lstrip()[10:] # This line helps us get the MAC address as it's on the same line as the cell number

            if currentCell != None:
                currentCell.parseLine(line)
                if currentCell.encryption != '':
                    cellList.append(currentCell)
                    currentCell = None

        file.close()
        os.system("sudo rm /tmp/networklist")
        
    printTable(cellList)

main()

